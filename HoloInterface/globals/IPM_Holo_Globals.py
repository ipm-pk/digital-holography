# -*- coding: utf-8 -*-
# auto-generated by C:\holo_dir\pyholo\c_to_py_tools\helpers.py, None
# auto-generated from C:\holo_release\include\IPM_Holo_Globals.h, v1.2-870-ga56138a-dirty
# DO NOT EDIT; WILL BE OVERWRITTEN!


# Do not edit, this file is autogenerated and will be overwritten.
import ctypes
import enum


# Do not edit, this file is autogenerated and will be overwritten.
ctypes_generated_from_vcs_revision = b"v1.2-870-ga56138a-dirty"


# Do not edit, this file is autogenerated and will be overwritten.
# Enums from C:\holo_release\include\IPM_Holo_Globals.h


# Do not edit, this file is autogenerated and will be overwritten.
@enum.unique
class FunctionId(enum.IntEnum):
    init_all = 0
    exit_all = 1  # Hardware
    init_hardware = 10
    set_eom_amplitude10 = 20  # ab 2021-04-13 ungenutzt, loeschen?
    set_eom_offset10 = 21  # ab 2021-04-13 ungenutzt, loeschen?
    set_pzt_amplitude = 22  # ab 2021-04-13 ungenutzt, loeschen?
    set_pzt_delay_s = 23  # ab 2021-04-13 ungenutzt, loeschen?
    set_fiber_delay_s = 24  # ab 2021-04-13 ungenutzt, loeschen?
    set_exptime_ms = 25  # ab 2021-04-13 ungenutzt, loeschen?
    set_measurements_per_second = 26  # 2019-11-20: (Seit langem?) nicht genutzt.
    set_laser_holoport = 27
    set_rotating_motor_degree = 28  # calculation
    init_gpu = 50
    process_single_stack = 51
    set_filter_radius = 52
    set_filter_radius_median = 53
    set_pixel_size_object_plane_DEPRECATED = 54  # TBe 2018-01: steht in cam_settings, sollte nicht mehr noetig sein.
    rescale_pixel_size = 55
    set_propagation_distance = 56
    set_second_order_term = 57
    set_second_order_term_correction_y = 58  # Korrekturfaktor fuer Paraboloide mit elliptischem Schnitt Parallel zu z=konst
    set_tilt_x = 59
    set_tilt_y = 60
    set_section_auto_tilt = 61
    set_ref_point_x = 62
    set_ref_point_y = 63
    set_ref_area_size = 64
    set_ref_value = 65
    set_use_ref_val = 66
    set_threshold_amplitude = 67
    set_flag_mask_overexposed = 68  # uberbelichtete Pixel ausmaskieren
    set_flag_outlier_removal = 69  # Ausreiser entfernen
    set_flag_mask_circular_DEPRECATED = 70  # nur kreisfoermigen Ausschnitt anzeigen  // TBe 2018-01: entfernt, ringmaske benutzen.
    set_flag_auto_tilt_line = 71  # automatische Tilt-Korrektur
    set_flag_auto_tilt_circle = 72
    set_combination_method = 73  # wie sollen gtob und feinsignal verrechnet werden 
    set_min_modulation = 74  # wieviel Modulation (in bits) ist min. noetig, um Punkt als gueltig zu werten
    set_flag_filter_before_propagate = 75  # soll vor der Propagation leicht geglaettet werden (und nur dann!)
    set_min_for_display = 76  # Wert definieren, der im Ausgabe bitmap Grauwert 0 entspricht
    set_max_for_display = 77  # Wert definieren, der im Ausgabe bitmap Grauwert 255 entspricht
    transfer = 78
    unlock_qimage_buffer = 79  # ab 2019-11 nicht mehr genutzt
    save_32_bit_image = 80
    copy_result_data = 81
    save_images_for_calibration = 82  # 2020-02-05 ungenutzt, aber hier belassen, um Nummerierung nicht zu aendern
    save_raw_images = 83  # set_cam_image_width = 80,  // 2020-04-21 ungenutzt, wegen Kollision mit save_32_bit_image auskommentiert.
    ready_for_trigger = 90  # https://gitlab.ipmlan.ipm.fraunhofer.de/holo_dir/cpp/holo_dll/-/issues/207#note_83302
    grab_single_stack = 100
    grabbing_finished = 101  # das soll angeben dass der Pruefling entfernt werden kann da die Bilder aufgenommen wurden (KEINE KOMMAS)
    ready_for_next_meas = 102  # Veraltet, weil schlecht gepflegt: (mindestens) ein Kamerapuffer ist frei, um eine neue Messung durchzufuehren. optional int: Anzahl freier Puffer. Achtung: Diese Zahl kann schon falsch sein, wenn das Signal ankommt.
    ready_to_start_new_measurement = 105  # neu ab 2022: Fruehestmoeglicher Zeitpunkt, um eine neue Messung zu erlauben
    evaluated_data_ready = 110  # Daten liegen -> das duerfte bis auf weiteres an der gleichen Stelle pasieren, wie  das alte ready_for_next_meas
    auto_focus_finished = 111  # das wird ausgegeben, wenn der Autofokus fertig ist, optional_value ist dann prop_dist in micormeter	
    count_free_result_buffers = 112  # zaehlen, wie viele Eegebnisbuffer frei sind
    stop_measurement = 113  # 2020-02: ungenutzt.
    grab_combined_stack = 114
    manual_fiberswitch = 150  # steuer-Befehle fuer BV
    set_bv_active = 300
    set_auto_save_level = 301  # keines, nur NIO oder alle Bilder speichern
    set_threshold_centering = 400  # Schwellwert fuer Zentrierung
    set_threshold_borehole = 401  # Schwellwert fuer das Finden der Bohrungsraender
    set_threshold_unwrap_20 = 402
    set_unwrapper_R04 = 403  # soll der Unrwapper auf r04 angwendet werden
    set_unwrapper_dome = 404  # unwrap radial am Dom-Innerand
    set_unwrapper_boreholes = 405  # unwrap am rand der Bohrungen
    set_unwrapper_inner_cone_margin = 406  # soll der Unrwapper auf Innenrand des 20Grad-Kegels angwendet werden
    set_unwrapper_inner_cone_full = 407  # oder auf dem ganzen inneren Kegel
    set_min_size_for_blob = 408  # wie gross mus ein Blob sein (momentan durchmesser in micron) um als Fehler zu gelten
    motor_command_finished = 500  # fuer TCP, wenn Motor fertig ist


# Do not edit, this file is autogenerated and will be overwritten.
@enum.unique
class holo_modes(enum.IntEnum):
    HOLO_MODE_NOT_INITIALIZED = -1
    HOLO_HARDWARE_IDLE = 0  # alles ist in Ruhe
    HOLO_EXIT = 1  # beenden der software laeuft
    HOLO_CAMERA_GRAB_RUNNING = 2  # Kamera laeuft gerade
    HOLO_CAMERA_HAS_GRABBED = 3  # d.h. Kamera ist im IDLE Status
    HOLO_MEASURING_WAVELENGTH = 4


# Do not edit, this file is autogenerated and will be overwritten.
@enum.unique
class error_codes_IPM(enum.IntEnum):
    HOLO_SUCCESS = 0
    HOLO_GENERAL_ERROR = -110
    HOLO_ERROR_ALREADY_INITIALIZED = -109
    HOLO_ERROR_NOT_IN_IDLE_STATE = -108
    HOLO_ERROR_NOT_IMPLEMENTED = -107
    HOLO_ERROR_ALLOC = -106
    HOLO_ERROR_NUM_PHASE_STEPS = -105
    HOLO_ERROR_INVALID_CONFIGURATION = -104
    HOLO_ERROR_START_VIA_SIG_COMMAND_NOT_ALLOWED = -103
    HOLO_ERROR_COPY_RESULT_DATA = -102
    HOLO_FILTER_ERROR = -101
    HOLO_DONGLE_ERROR = -100
    HOLO_ENVIRONMENT_ERROR = -99  # an environment variable is not set properly
    HOLO_ERROR_CONTINUOS_PAUSED = -98  # Kontinuierliches Messen im paused mode geht gerade nicht
    HOLO_ERROR_IMAGE_LOCK = -97  # Fehler, wenn 
    DAQ_INIT_ERROR = -120
    DAQ_SET_CHANNEL_ERROR = -119
    DAQ_START_ERROR = -118  # Kamera-Fehler
    CAM_INIT_ERROR = -1300  # TBe 2019-09-02: ext_trig_cam von bool auf enum umgestellt; neue Fehlercodes, mehr als 10. Deshalb: eine Null dazu. 
    CAM_REGISTER_BUFFERS_ERROR = -1299
    CAM_INIT_SIMULATE_ERROR = -1298
    CAM_START_ERROR = -1297
    CAM_STOP_ERROR = -1296
    CAM_MUTEX_ERROR = -1295
    CAM_GRAB_ERROR = -1294
    CAM_ERROR_TIMEOUT = -1293
    CAM_EXP_ERROR = -1292
    CAM_TYPE_UNKNOWN = -1291
    CAM_FILE_NOT_FOUND = -1290
    CAM_FRAMEGRABBER_INIT_ERROR = -1289
    CAM_CONNECT_CXP_ERROR = -1288
    CAM_LOAD_CAM_PARAMS_ERROR = -1287
    CAM_ROI_ERROR = -1286
    CAM_FPS_ERROR = -1285
    CAM_TEMPERATURE_ERROR = -1284  # IO-Fehler
    HOLO_SAVE_ERROR = -150
    HOLO_LASERLIST_WRONG_NUMBER = -149
    HOLO_LASERLIST_WRONG_LAMBDAS = -148
    HOLO_ERROR_OPENING_FILE = -147
    HOLO_ERROR_FILE_NOT_EXISTING = -146  # 2021-03-11 CUDA-Fehler nach CUDA_HOLO verschoben.
    HOLO_CUDA_ERROR = -160  # Sammelfehler: In CUDA ist etwas schiefgelaufen. Details in sig_send_text.
    CUDA_COPY_ERROR = -1600  # CUDA_FFT_ERROR,
    CUDA_FFT_FILTER_ERROR = -1599  # CUDA_ERROR,
    CUDA_REF_VAL_ERROR = -1598  # CUDA_INVALID_DARK_IMAGE_ERROR,		// groesse des Dunkelbildes passt nicht
    CUDA_DARKIMAGE_CORRECTION_ERROR = -1597  # d.h. beim Dunkelbildabziehen gab es einen Fehler
    CUDA_VIRTUALLENS_ERROR = -1596
    ERROR_RING_BUFFER_STILL_LOCKED = -1700  # Hinweis: MOTOR_ERRORS in motor_definitions um 4096!
    NOT_STARTED = -200  # Fuer HoloRequest: Dieser Schritte wurde ueberhaupt noch nicht gestartet.
    HOLO_WAVEMETER_ERROR = -2200


# Do not edit, this file is autogenerated and will be overwritten.
@enum.unique
class HoloLogLevel(enum.IntEnum):  # info-Levels fuer gesendete QStrings
    HOLO_HARDWARE_VERBOSE = 150  # wenn man von der Hardware wirklich alles hoeren will...
    HOLO_INFO = 200
    HOLO_INIT_INFO = 201
    HOLO_STATUS = 202  # Aktuell nur fuer Modulationen und Holoport genutzt
    HOLO_PROCESSING_RESULT = 203  # ??
    HOLO_WARNING = 204
    HOLO_CRITICAL_WARNING = 205  # warnung mit popup
    HOLO_ERROR = 206
    HOLO_BUFFER_INFO = 207  # Meldung zu Verwendung / Zustand der Kamera- und Ergebnispuffer.


# Do not edit, this file is autogenerated and will be overwritten.
@enum.unique
class control_id(enum.IntEnum):
    CONTROLLED_BY_GUI = 1  # d.h. die Befehle zur Bilduafnahme usw werden von der GUI gesendet
    CONTROLLED_BY_COMCLASS = 2  # d.h. die Befehler zur Bildaufahme kommen vom Communications-Thread


# Do not edit, this file is autogenerated and will be overwritten.
# Structs from C:\holo_release\include\IPM_Holo_Globals.h


# Do not edit, this file is autogenerated and will be overwritten.
class KeysTopLevel(ctypes.Structure):
    _fields_ = [
        ("KEY_SINGLE_LASERS", ctypes.c_char_p),
        ("KEY_LDA_COMBOS", ctypes.c_char_p),
        ("KEY_CAMERA_SETTINGS", ctypes.c_char_p),
        ("KEY_OBJECT_DATA", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.KEY_SINGLE_LASERS = b"single lasers"
        self.KEY_LDA_COMBOS = b"synthetic wavelengths"
        self.KEY_CAMERA_SETTINGS = b"camera settings"
        self.KEY_OBJECT_DATA = b"object_data"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysCameraSettings(ctypes.Structure):
    _fields_ = [
        ("KEY_FG_CAM_TYPE", ctypes.c_char_p),
        ("KEY_TRIGGER_TYPE", ctypes.c_char_p),
        ("KEY_CAM_W", ctypes.c_char_p),
        ("KEY_CAM_H", ctypes.c_char_p),
        ("KEY_CAM_OFFSET_X", ctypes.c_char_p),
        ("KEY_CAM_OFFSET_Y", ctypes.c_char_p),
        ("KEY_PIXEL_CAM_UM", ctypes.c_char_p),
        ("KEY_PIXEL_CONJUG_UM", ctypes.c_char_p),
        ("KEY_FOCAL_LENGTH_MM", ctypes.c_char_p),
        ("KEY_F_NUMBER", ctypes.c_char_p),
        ("KEY_CAM_TIMEOUT_S", ctypes.c_char_p),
        ("KEY_CAM_ANGLE", ctypes.c_char_p),
        ("KEY_CAM_MIRROR_LR", ctypes.c_char_p),
        ("KEY_CAM_MIRROR_UD", ctypes.c_char_p),
        ("KEY_SERIAL_NUMBER", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.KEY_FG_CAM_TYPE = b"cam type"
        self.KEY_TRIGGER_TYPE = b"trigger_type"
        self.KEY_CAM_W = b"cam_w"
        self.KEY_CAM_H = b"cam_h"
        self.KEY_CAM_OFFSET_X = b"cam_offset_x"
        self.KEY_CAM_OFFSET_Y = b"cam_offset_y"
        self.KEY_PIXEL_CAM_UM = b"pixel_size_cam_um"
        self.KEY_PIXEL_CONJUG_UM = b"pixel_size_conjugated_plane"
        self.KEY_FOCAL_LENGTH_MM = b"focal_length_mm"
        self.KEY_F_NUMBER = b"f_number"
        self.KEY_CAM_TIMEOUT_S = b"cam_timeout_s"
        self.KEY_CAM_ANGLE = b"cam_rotation_angle"
        self.KEY_CAM_MIRROR_LR = b"cam_mirror_lr"
        self.KEY_CAM_MIRROR_UD = b"cam_mirror_ud"
        self.KEY_SERIAL_NUMBER = b"serial_number_camera"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysObjectData(ctypes.Structure):
    _fields_ = [
        ("KEY_FILE_MASK_RAW", ctypes.c_char_p),
        ("KEY_FILE_MASK_RESULT", ctypes.c_char_p),
        ("KEY_OUTPUT_MODE", ctypes.c_char_p),
        ("KEY_AUTO_DOWNSAMPLING_SPS", ctypes.c_char_p),
        ("KEY_MASK_CIRCULAR_SPS", ctypes.c_char_p),
        ("KEY_CALIBRATE_FROM_WAVEMETER", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.KEY_FILE_MASK_RAW = b"file_name_mask_raw_image"
        self.KEY_FILE_MASK_RESULT = b"file_name_mask_result_image"
        self.KEY_OUTPUT_MODE = b"output mode"
        self.KEY_AUTO_DOWNSAMPLING_SPS = b"auto_downsampling_SPS"
        self.KEY_MASK_CIRCULAR_SPS = b"mask_circular_SPS"
        self.KEY_CALIBRATE_FROM_WAVEMETER = b"calibrate_from_wavemeter"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysHardwareData(ctypes.Structure):
    _fields_ = [
        ("EXPOSURE_MS", ctypes.c_char_p),
        ("AUTOEXPOSURE", ctypes.c_char_p),
        ("TARGETBRIGHTNESS", ctypes.c_char_p),
        ("MAX_ALLOWED_EXPOSURE_MS", ctypes.c_char_p),
        ("MIN_ALLOWED_EXPOSURE_MS", ctypes.c_char_p),
        ("CAMERA_GAIN", ctypes.c_char_p),
        ("AUTO_EXTERNAL_VOLTAGE", ctypes.c_char_p),
        ("KEY_EOM_AMPLITUDE", ctypes.c_char_p),
        ("KEY_EOM_OFFSET", ctypes.c_char_p),
        ("PZT_AMP_V", ctypes.c_char_p),
        ("PZT_AMP_SCALE_POSITIVE", ctypes.c_char_p),
        ("PZT_DELAY_MS", ctypes.c_char_p),
        ("FIBER_DELAY_MS", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.EXPOSURE_MS = b"exposure_ms"
        self.AUTOEXPOSURE = b"auto_expsoure"
        self.TARGETBRIGHTNESS = b"target_brightness"
        self.MAX_ALLOWED_EXPOSURE_MS = b"max_allowed_exposure_ms"
        self.MIN_ALLOWED_EXPOSURE_MS = b"min_allowed_exposure_ms"
        self.CAMERA_GAIN = b"camera_gain"
        self.AUTO_EXTERNAL_VOLTAGE = b"auto_external_voltage"
        self.KEY_EOM_AMPLITUDE = b"eom_amplitude"
        self.KEY_EOM_OFFSET = b"eom_offset"
        self.PZT_AMP_V = b"piezo_amplitude"
        self.PZT_AMP_SCALE_POSITIVE = b"piezo_voltage_scale_positive"
        self.PZT_DELAY_MS = b"piezo_delay"
        self.FIBER_DELAY_MS = b"fiber_delay_ms"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysWavemeter(ctypes.Structure):
    _fields_ = [
        ("USE_MULTICHANNEL_SWITCH", ctypes.c_char_p),
        ("DUAL_PORT_SWITCH_FLAG", ctypes.c_char_p),
        ("WAVELENGTH_TOLERANCE_NM", ctypes.c_char_p),
        ("EXPOSURE_WAVEMETER_LASER_", ctypes.c_char_p),
        ("DEFAULT_EXPOSURE_WAVEMETER", ctypes.c_char_p),
        ("MAX_EXPOSURE_WAVEMETER", ctypes.c_char_p),
        ("SAVE_INTERFERENCE_PATTERN", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.USE_MULTICHANNEL_SWITCH = b"use_multichannel_switch"
        self.DUAL_PORT_SWITCH_FLAG = b"flag_dual_port_switch"
        self.WAVELENGTH_TOLERANCE_NM = b"wavelength_tolerance_nm"
        self.EXPOSURE_WAVEMETER_LASER_ = b"exposure_wavemeter_laser_at_port_"
        self.DEFAULT_EXPOSURE_WAVEMETER = b"default_exposure_wavemeter"
        self.MAX_EXPOSURE_WAVEMETER = b"max_exposure_wavemeter"
        self.SAVE_INTERFERENCE_PATTERN = b"save_interference_pattern"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysSingleLaser(ctypes.Structure):
    _fields_ = [
        ("KEY_LASER_WL_M", ctypes.c_char_p),
        ("KEY_LASER_PORT", ctypes.c_char_p),
        ("KEY_WAVEMETER_PORT", ctypes.c_char_p),
        ("KEY_LASER_U", ctypes.c_char_p),
        ("KEY_LASER_REL_EXP", ctypes.c_char_p),
        ("KEY_NUM_PHASE_STEPS", ctypes.c_char_p),
        ("SPS_angles", ctypes.c_char_p),
        ("trigger_bitmask", ctypes.c_char_p),
        ("SPS_raw_image_index", ctypes.c_char_p),
        ("KEY_ATTENUATOR", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.KEY_LASER_WL_M = b"lda_m"
        self.KEY_LASER_PORT = b"port"
        self.KEY_WAVEMETER_PORT = b"wavemeter_port"
        self.KEY_LASER_U = b"Ext. Voltage"
        self.KEY_LASER_REL_EXP = b"rel exposure"
        self.KEY_NUM_PHASE_STEPS = b"num phase steps"
        self.SPS_angles = b"SPS_angles"
        self.trigger_bitmask = b"trigger_bitmask"
        self.SPS_raw_image_index = b"SPS_raw_image_index"
        self.KEY_ATTENUATOR = b"connected_to_attenuator"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysSPSAngles(ctypes.Structure):
    _fields_ = [
        ("y", ctypes.c_char_p),
        ("x", ctypes.c_char_p),
        ("height_y", ctypes.c_char_p),
        ("width_x", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.y = b"y"
        self.x = b"x"
        self.height_y = b"height_y"
        self.width_x = b"width_x"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysRingBufferSizes(ctypes.Structure):
    _fields_ = [
        ("num_holded_requests", ctypes.c_char_p),
        ("num_frame_buffers", ctypes.c_char_p),
        ("num_result_buffers", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.num_holded_requests = b"num_holded_requests"
        self.num_frame_buffers = b"num_frame_buffers"
        self.num_result_buffers = b"num_result_buffers"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysRawQuality(ctypes.Structure):
    _fields_ = [
        ("MAX_NUM_REPEATS", ctypes.c_char_p),
        ("CURRENT_NUM_REPEATS", ctypes.c_char_p),
        ("FLAG_VARIATION_OF_GRAYVALS_AS_CRITERION", ctypes.c_char_p),
        ("REL_THRESHOLD_VARIATION_GRAYVALS", ctypes.c_char_p),
        ("VARATION_OF_GRAYVALS_REFERENCE_METHOD", ctypes.c_char_p),
        ("FLAG_DEVIATION_PHASESTEPS_AS_CRITERION", ctypes.c_char_p),
        ("REL_THRESHOLD_DEVIATION_PHASESTEPS", ctypes.c_char_p),
        ("FLAG_MODULATION_AS_CRITERION", ctypes.c_char_p),
        ("THRESHOLD_VARIATION_MODULATION", ctypes.c_char_p),
        ("MODULATION_REFERENCE_METHOD", ctypes.c_char_p),
        ("FLAG_SMOOTHNESS_AS_CRITERION", ctypes.c_char_p),
        ("THRESHOLD_VARIATION_SMOOTHENESS", ctypes.c_char_p),
        ("SNOOTHNESS_REFERENCE_METHOD", ctypes.c_char_p),
        ("FLAG_SNR_FFT_AS_CRITERION", ctypes.c_char_p),
        ("THRESHOLD_SNR_FFT", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.MAX_NUM_REPEATS = b"max_num_repeats"
        self.CURRENT_NUM_REPEATS = b"current_num_repeats"
        self.FLAG_VARIATION_OF_GRAYVALS_AS_CRITERION = b"flag_sigma_grayvals_as_criterion"
        self.REL_THRESHOLD_VARIATION_GRAYVALS = b"rel_threshold_variation_grayvals"
        self.VARATION_OF_GRAYVALS_REFERENCE_METHOD = b"variation_reference_method"
        self.FLAG_DEVIATION_PHASESTEPS_AS_CRITERION = b"flag_deviation_phase_steps_as_criterion"
        self.REL_THRESHOLD_DEVIATION_PHASESTEPS = b"rel_threshold_deviation_phasesteps"
        self.FLAG_MODULATION_AS_CRITERION = b"flag_modulation_as_criterion"
        self.THRESHOLD_VARIATION_MODULATION = b"threshold_variation_modulation"
        self.MODULATION_REFERENCE_METHOD = b"modulation_reference_method"
        self.FLAG_SMOOTHNESS_AS_CRITERION = b"flag_smoothness_as_criterion"
        self.THRESHOLD_VARIATION_SMOOTHENESS = b"threshold_variation_smootheness"
        self.SNOOTHNESS_REFERENCE_METHOD = b"smoothness_reference_method"
        self.FLAG_SNR_FFT_AS_CRITERION = b"flag_snr_fft_steps_as_criterion"
        self.THRESHOLD_SNR_FFT = b"threshold_snr_fft"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysDetectInFocusSettings(ctypes.Structure):
    _fields_ = [
        ("USE_FOR_GLOBAL_REFERENCE", ctypes.c_char_p),
        ("USE_FOR_OFFSET_COMBINATION", ctypes.c_char_p),
        ("RADIUS_SMOOTH", ctypes.c_char_p),
        ("BINNING_FACTOR", ctypes.c_char_p),
        ("THRESHOLD_OBJECT_MASK", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.USE_FOR_GLOBAL_REFERENCE = b"use_for_global_reference"
        self.USE_FOR_OFFSET_COMBINATION = b"use_for_offset_combination"
        self.RADIUS_SMOOTH = b"radius_smooth"
        self.BINNING_FACTOR = b"binning_factor"
        self.THRESHOLD_OBJECT_MASK = b"threshold_object_mask"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysTiltDetection(ctypes.Structure):
    _fields_ = [
        ("KEY_AUTO_TILT_METHOD", ctypes.c_char_p),
        ("KEY_TILT_MIRROR_ONLY", ctypes.c_char_p),
        ("KEY_TILT_LOWPASS_BEFORE", ctypes.c_char_p),
        ("KEY_TILT_EACH_SYNTH_INDIVIDUAL", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.KEY_AUTO_TILT_METHOD = b"auto_tilt_method"
        self.KEY_TILT_MIRROR_ONLY = b"tilt_mirror_only"
        self.KEY_TILT_LOWPASS_BEFORE = b"tilt_lowpass_before"
        self.KEY_TILT_EACH_SYNTH_INDIVIDUAL = b"tilt_each_synth_individ"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysHeightConversionSettings(ctypes.Structure):
    _fields_ = [
        ("CONVERT_TO_HEIGHT_UNIT", ctypes.c_char_p),
        ("REVERT_UNTILT", ctypes.c_char_p),
        ("TRANSPOSE", ctypes.c_char_p),
        ("ROTATION_TYPE", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.CONVERT_TO_HEIGHT_UNIT = b"convert_to_height_unit"
        self.REVERT_UNTILT = b"revert_untilt"
        self.TRANSPOSE = b"do_transpose"
        self.ROTATION_TYPE = b"rotation_type"
