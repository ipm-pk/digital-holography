# -*- coding: utf-8 -*-
# auto-generated by C:\holo_dir\pyholo\c_to_py_tools\helpers.py, None
# auto-generated from C:\holo_release\include\holo_tcp_globals.h, v1.2-870-ga56138a-dirty
# DO NOT EDIT; WILL BE OVERWRITTEN!


# Do not edit, this file is autogenerated and will be overwritten.
import ctypes
import enum

# Do not edit, this file is autogenerated and will be overwritten.
ctypes_generated_from_vcs_revision = b"v1.2-870-ga56138a-dirty"


# Do not edit, this file is autogenerated and will be overwritten.
# Enums from C:\holo_release\include\holo_tcp_globals.h


# Do not edit, this file is autogenerated and will be overwritten.
@enum.unique
class StackReceiverCommand(enum.IntEnum):  # benutzt in tcp_stack_receiver
    SIG_COMMAND = 0
    SIG_FUNCTION_READY = 1
    SIG_SEND_TEXT = 2
    SIG_HOLOPORT_STATUS = 3


# Do not edit, this file is autogenerated and will be overwritten.
@enum.unique
class ServerToClientCommand(enum.IntEnum):
    FUNCTION_READY = 1
    TEXT_MESSAGE = 2
    PROCESSING_RESULTS = 3
    CURRENT_SENDERS = 4
    COMMAND_FROM_DLL = 5
    SENDING_MEASUREMENT = 6  # Auf Datenschnittstelle folgt ein Datenpaket
    MEASURE_LASERS_FINISHED = 7
    SAVING_FINISHED = 8


# Do not edit, this file is autogenerated and will be overwritten.
@enum.unique
class ClientToServerCommand(enum.IntEnum):  # benutzt in TcpServer (z.B. f???r Profibus)
    START_ACQUISITION = 1
    SET_NEW_PARAMETERS = 2
    CHECK_TRIGGERABLE = 3  # es soll geprueft werden, ob die software per GUI im extern-getriggerten Modus ist
    MEASURE_LASERS = 4  # Laser-Wellenl??ngen mit Wavemeter messen
    SAVE_REQUESTS = 5
    MOTOR_COMMAND = 6  # befehl an motor
    RE_INIT = 7


# Do not edit, this file is autogenerated and will be overwritten.
# Structs from C:\holo_release\include\holo_tcp_globals.h


# Do not edit, this file is autogenerated and will be overwritten.
class KeysServerToClient(ctypes.Structure):
    _fields_ = [
        ("command", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.command = b"tcp_server_to_client_command"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysClientToServer(ctypes.Structure):
    _fields_ = [
        ("command", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.command = b"tcp_client_to_server_command"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysFunctionReady(ctypes.Structure):
    _fields_ = [
        ("KEY_ERROR_CODE", ctypes.c_char_p),
        ("KEY_FUNCTION_ID", ctypes.c_char_p),
        ("KEY_OPTIONAL_INT", ctypes.c_char_p),
        ("KEY_OPTIONAL_DOUBLE", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.KEY_ERROR_CODE = b"error_code"
        self.KEY_FUNCTION_ID = b"function_id"
        self.KEY_OPTIONAL_INT = b"optional_int"
        self.KEY_OPTIONAL_DOUBLE = b"optional_double"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysSendText(ctypes.Structure):
    _fields_ = [
        ("TEXT", ctypes.c_char_p),
        ("LEVEL", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.TEXT = b"text"
        self.LEVEL = b"level"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysSendingMeasurement(ctypes.Structure):
    _fields_ = [
        ("buffer_desc", ctypes.c_char_p),
        ("bytes_to_expect", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.buffer_desc = b"buffer description"
        self.bytes_to_expect = b"bytes to expect"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysStartAcq(ctypes.Structure):
    _fields_ = [
        ("function_id", ctypes.c_char_p),
        ("output_mode", ctypes.c_char_p),
        ("buffers_to_return", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.function_id = b"function_id"
        self.output_mode = b"output_mode"
        self.buffers_to_return = b"buffers_to_return"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysBufferDesc(ctypes.Structure):
    _fields_ = [
        ("processing_step", ctypes.c_char_p),
        ("laser_nr", ctypes.c_char_p),
        ("img_nr", ctypes.c_char_p),
        ("is_amp", ctypes.c_char_p),
        ("meas_id", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.processing_step = b"processing step"
        self.laser_nr = b"laser nr"
        self.img_nr = b"img nr"
        self.is_amp = b"is amp"
        self.meas_id = b"measurement_id"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysCvStackDesc(ctypes.Structure):
    _fields_ = [
        ("stack_size", ctypes.c_char_p),
        ("image_id", ctypes.c_char_p),
        ("buffer_name", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.stack_size = b"stack size"
        self.image_id = b"image id"
        self.buffer_name = b"buffer name"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysLaserCalibration(ctypes.Structure):
    _fields_ = [
        ("laser_idcs", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.laser_idcs = b"laser_indices"


# Do not edit, this file is autogenerated and will be overwritten.
class KeysSaveHoldedRequests(ctypes.Structure):
    _fields_ = [
        ("folder_path", ctypes.c_char_p),
        ("requested_measurement_id", ctypes.c_char_p),
        ("file_prefix_info", ctypes.c_char_p),
    ]

    def __init__(self):
        super().__init__()
        self.folder_path = b"folder_path"
        self.requested_measurement_id = b"requested_measurement_id"
        self.file_prefix_info = b"file_prefix_info"
